if (POLICY CMP0048)
  cmake_policy(SET CMP0048 NEW)
endif()
project(clang-wrapper VERSION 0.1.0)
cmake_minimum_required(VERSION 3.24)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE debug)
endif()
string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE)
message(STATUS "Build Type ${CMAKE_BUILD_TYPE}")
if(CMAKE_BUILD_TYPE STREQUAL "debug")
  option(ASAN "Address Sanitizer" ON)
else()
  option(ASAN "Address Sanitizer" OFF)
endif()
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
message(STATUS "CMAKE_EXPORT_COMPILE_COMMANDS ${CMAKE_EXPORT_COMPILE_COMMANDS}")

message(STATUS "Address Sanitizer ${ASAN}")
if(ASAN)
  add_compile_options(-fsanitize=address -fno-omit-frame-pointer)
  add_link_options(-fsanitize=address)
endif()

function(llvm_config OUTPUT_VARIABLE ARGS)
  execute_process(COMMAND llvm-config ${ARGS} OUTPUT_VARIABLE ${OUTPUT_VARIABLE})
  string(STRIP ${${OUTPUT_VARIABLE}} ${OUTPUT_VARIABLE})
  set(${OUTPUT_VARIABLE} ${${OUTPUT_VARIABLE}} PARENT_SCOPE)
endfunction()

llvm_config(LLVM_HOME --prefix)
set(CMAKE_C_COMPILER ${LLVM_HOME}/bin/clang)
set(CMAKE_CXX_COMPILER ${LLVM_HOME}/bin/clang++)
llvm_config(LLVM_INCLUDE_DIR --includedir)
include_directories(${LLVM_INCLUDE_DIR})
include_directories(${CMAKE_SOURCE_DIR}/src)
llvm_config(LLVM_LIBDIR --libdir)
link_directories(${LLVM_LIBDIR})
llvm_config(LLVM_LIBS --libs)
link_libraries(${LLVM_LIBS})

aux_source_directory(${CMAKE_SOURCE_DIR}/src/common/ COMMON_SRCS)

list(APPEND BASE_SRCS ${COMMON_SRCS} src/main.cc src/wrapper/wrapper_base.cc)
add_executable(base ${BASE_SRCS})
add_executable(base++ ${BASE_SRCS})
target_compile_definitions(base++ PUBLIC USE_CXX)
