include_guard()
include(utility)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set_default(CMAKE_BUILD_TYPE debug)
string(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE)
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
message(STATUS "CMAKE_EXPORT_COMPILE_COMMANDS ${CMAKE_EXPORT_COMPILE_COMMANDS}")

if(CMAKE_BUILD_TYPE STREQUAL "debug")
  option(ASAN "Address Sanitizer" ON)
else()
  option(ASAN "Address Sanitizer" OFF)
endif()
message(STATUS "Address Sanitizer ${ASAN}")
if(ASAN)
  add_compile_options(-fsanitize=address -fno-omit-frame-pointer)
  add_link_options(-fsanitize=address)
endif()

option(NDK "Android NDK")
message(STATUS "Android NDK ${NDK}")
if(NDK)
  if(NOT LLVM_HOME)
    exec(LLVM_HOME brew --prefix llvm@11)
  endif()
else()
  if(NOT LLVM_HOME)
    set_default(LLVM_CONFIG "llvm-config")
    llvm_config(LLVM_HOME --prefix)
    unset(LLVM_CONFIG)
  endif()
endif()

message(STATUS "LLVM_HOME: ${LLVM_HOME}")

if(NOT LLVM_CONFIG)
  set(LLVM_CONFIG "${LLVM_HOME}/bin/llvm-config")
endif()

set(CMAKE_C_COMPILER ${LLVM_HOME}/bin/clang)
set(CMAKE_CXX_COMPILER ${LLVM_HOME}/bin/clang++)

llvm_config(LLVM_INCLUDE_DIR --includedir)
include_directories(${LLVM_INCLUDE_DIR})
include_directories(${CMAKE_SOURCE_DIR}/src)

llvm_config(LLVM_LIBDIR --libdir)
message(STATUS "Link Directories: ${LLVM_LIBDIR}")
link_directories(${LLVM_LIBDIR})

set(LLVM_LIBS LLVM)
message(STATUS "Link Libraries: ${LLVM_LIBS}")
link_libraries(${LLVM_LIBS})

set_default(LOG_LEVEL DEBUG DEFINED)
set_default(LOG_PATH /dev/stderr)
set_default(TARGET_CC ${CMAKE_C_COMPILER})
set_default(TARGET_CXX ${CMAKE_CXX_COMPILER})
message(STATUS "LOG_LEVEL  : ${LOG_LEVEL}")
message(STATUS "LOG_PATH   : ${LOG_PATH}")
message(STATUS "TARGET_CC  : ${TARGET_CC}")
message(STATUS "TARGET_CXX : ${TARGET_CXX}")
add_compile_definitions(LOG_LEVEL=LOG_LEVEL_${LOG_LEVEL})
add_compile_definitions(LOG_PATH="${LOG_PATH}")
add_compile_definitions(TARGET_CC="${TARGET_CC}")
add_compile_definitions(TARGET_CXX="${TARGET_CXX}")
if(NDK)
  add_compile_definitions(NDK=1)
endif()
